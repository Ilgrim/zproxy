#!/usr/bin/perl

# USAGE DOCUMENTATION:
#
# Options:
# -http_cfg_file : Path to the config file used by zproxy in the HTTP tests. Default: test_http.cfg
# -https_cfg_file : Path to the config file used by zproxy in the HTTPS tests. Default: test_https.cfg
# -ip : Destination IP/URL used to do the requests. Default: localhost
# -port : Port used to do the requests in the HTTP tests. Default: 8000
# -port_https : Port used to do the requests in the HTTPS tests. Default: 8443
# -post_file : Path to the custom file to be send in the POST request tests. Default: data/test_text.txt
# -binary : Path to the zproxy binary. Default: ../build/bin/zproxy
# -https : If this flag is set the HTTPS tests are going to be executed.
# -no_zproxy : If this flag is set, zproxy is not going to be launched.
# -control : Path to the control socket used to test de API. Default: /tmp/zproxy.socket

# REQUIREMENTS:
#
# In order to run the functional tests you will need to install the following perl packages:
#
# Term::ANSIColor
# JSON
# Getopt::Long (It should be installed by default.)
# Digest::MD5
# Digest::MD5::File
#
# In addition, you will need "curl" and "Perl5" installed in your system.

use Getopt::Long 'GetOptions';
use JSON qw(decode_json);
use Digest::MD5 qw(md5_hex);
use Digest::MD5::File qw(file_md5_hex);
use Term::ANSIColor;
use IO::Socket::INET;

my $zproxy_cfg = 'test_http.cfg';
my $zproxys_cfg = 'test_https.cfg';
my $ip = 'localhost';
my $port = '8000';
my $port_https = '8443';
my $file_path = 'test_text.txt';
my $binary = '../../build/bin/zproxy';
my $control_socket = '/tmp/zproxy.socket';
GetOptions(
    'post_file=s' => \$file_path,
    'http_cfg_file=s' => \$zproxy_cfg,
    'https_cfg_file=s' => \$zproxys_cfg,
    'https' => \my $https,
    'no_zproxy' => \my $no_zproxy,
    'ip=s' => \$ip,
    'port=s' => \$port,
    'port_https=s' => \$port_https,
    'binary=s' => \$binary,
    'control=s' => \$control_socket,
);

my $cmd = `pkill -9 $binary -f`;
run_docker();
if (!$no_zproxy) {
    run_zproxy($zproxy_cfg);
}
# Test a GET request.
test_get_200_ok();
# Test POST request with a file
test_check_POST_file();
# Test POST request with a file
test_check_POST_file_null_expect();
# Test POST request with a file
test_check_PUT_file();
# Test the connect timeout
test_connect_timeout();
if (!$no_zproxy) {
    # Test API disable a service
    test_disable_service();
    # Test API disable backend
    test_disable_backend();
    # Test disable service that doesn't exist
    test_disable_service_fail();
    # Test disable backend that doesn't exist
    test_disable_backend_fail();
    # Test enable backend
    test_enable_backend();
    # Tests enable service
    test_enable_service();
    # Test add a new backend
    test_add_backend();
    # Test add a new backend with wrong parameters
    test_add_backend_fail();
    # Test response time is updated right
    test_response_time();
    # Test connection time is updated right
    test_connection_time();
    # Test connections is updated right
    test_connections();
    stop_zproxy();
}

if ($https) {
    print "Starting HTTPS tests \n";
    if (!$no_zproxy) {
        run_zproxy($zproxys_cfg);
    }
    # Test GET request in HTTPS
    test_get_200_ok_https();
    # Test POST file in HTTPS
    test_check_POST_file_https();
    if (!$no_zproxy) {
        stop_zproxy();
    }
}
print "All tests done. Shutting down! \n";
clean_docker();

sub run_zproxy {
    my ($cfg) = @_;
    system("$binary -f $cfg");
    sleep(4);
}

sub stop_zproxy {
    my $cmd = `pkill -9 $binary -f`;
}

sub run_docker {
    print "Starting docker container..\n";
    # The docker container comes from https://github.com/mendhak/docker-http-https-echo
    # This container runs a HTTP backend in the port 8080 and a HTTPS backend in the port 8443
    # All its responses are a json object with all the request information.
    $docker_id = `sudo docker run -d -p 8080:80 -p 8443:443 --rm -t mendhak/http-https-echo`;
    sleep(2);
}

sub clean_docker {
    my $result = `sudo docker ps | grep mendhak | grep -vi grep | cut -d' ' -f1`;
    my $cmd = `sudo docker stop ${result}`;
}

sub assert_equal {

    my ($p1, $p2, $test_description) = @_;

    if ($p1 == $p2) {
        print "Test $test_description [",  color("bold green"), "PASS", color("reset"), "]\n";
    } else {
        print "Test $test_description [", color("bold red"), "FAIL", color("reset"), "]\n";
    }
}

sub assert_non_equal {

    my ($p1, $p2, $test_description) = @_;

    if ($p1 != $p2) {
        print "Test $test_description [",  color("bold green"), "PASS", color("reset"), "]\n";
    } else {
        print "Test $test_description [", color("bold red"), "FAIL", color("reset"), "]\n";
    }
}

sub test_check_POST_file_null_expect {

    my $response = `curl -s --data-binary "\@${file_path}" -H "Expect: " http://${ip}:${port}`;
    my $decoded = decode_json($response);
    my $file_crc = file_md5_hex($file_path);
    my $crc = $decoded->{'body'};

    assert_equal($crc, $file_crc, "POST_NULL_EXPECT file checksum");
}

sub test_check_POST_file {

    my $response = `curl -s --data-binary "\@${file_path}" http://${ip}:${port}`;
    my $decoded = decode_json($response);
    my $file_crc = file_md5_hex($file_path);
    my $crc = $decoded->{'body'};

    assert_equal($crc, $file_crc, "POST file checksum");
}

sub test_check_PUT_file {

    my $response = `curl -X PUT -s --data-binary "\@${file_path}" http://${ip}:${port}`;
    my $decoded = decode_json($response);
    my $file_crc = file_md5_hex($file_path);
    my $crc = $decoded->{'body'};

    assert_equal($crc, $file_crc, "PUT file checksum");
}

sub test_get_200_ok {
    my $response = `curl -s http://${ip}:${port}`;
    my $decoded = decode_json($response);

    assert_equal($decoded->{'method'}, "GET", "GET method");
}

sub test_check_POST_file_https {
    my $response = `curl -s -k --data-binary "\@${file_path}" -H "Expect: " https://${ip}:${port_https}`;
    my $decoded = decode_json($response);
    my $file_crc = file_md5_hex($file_path);
    my $crc = $decoded->{'body'};

    assert_equal($crc, $file_crc, "POST file https");
}

sub test_get_200_ok_https {
    my $response = `curl -s -k https://${ip}:${port_https}`;
    my $decoded = decode_json($response);

    assert_equal($decoded->{'method'}, "GET", "GET method HTTPS");
}

sub test_disable_backend {
    my $response = `curl -s -X PATCH --data-ascii '{status: "down"}' --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/0/status`;
    my $new_response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/0/status`;
    my $decoded_new = decode_json($new_response);

    assert_equal($decoded_new->{'status'}, "down", "API disable backend");
}

sub test_disable_service {
    my $response = `curl -s -X PATCH --data-ascii '{status: "down"}' --unix-socket ${control_socket} http://${ip}/listener/0/service/0/status`;
    my $new_response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/status`;
    my $decoded_new = decode_json($new_response);

    assert_equal($decoded_new->{'status'}, "down", "API disable service");
}

sub test_disable_service_fail {
    my $response = `curl -s -X PATCH --data-ascii '{status: "down"}' --unix-socket ${control_socket} http://${ip}/listener/0/service/200/status`;
    my $decoded = decode_json($response);

    assert_equal($decoded->{'result'}, "error", "API disable wrong service");
}

sub test_disable_backend_fail {
    my $response = `curl -s -X PATCH --data-ascii '{status: "down"}' --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/1000/status`;
    my $decoded = decode_json($response);

    assert_equal($decoded->{'result'}, "fail", "API disable wrong backend");
}

sub test_enable_backend {
    my $response = `curl -s -X PATCH --data-ascii '{status: "up"}' --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/0/status`;
    my $new_response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/status`;
    my $decoded_new = decode_json($new_response);

    assert_equal($decoded_new->{'status'}, "up", "API enable backend");
}

sub test_enable_service {
    my $response = `curl -s -X PATCH --data-ascii '{status: "up"}' --unix-socket ${control_socket} http://${ip}/listener/0/service/0/status`;
    my $new_response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/status`;
    my $decoded_new = decode_json($new_response);

    assert_equal($decoded_new->{'status'}, "up", "API enable service");
}

sub test_response_time {
    my $response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/0`;
    my $decoded = decode_json($response);
    
    assert_non_equal($decoded->{'response-time'}, "-1.0", "API check response time");
}

sub test_connection_time {
    my $response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/0`;
    my $decoded = decode_json($response);
    
    assert_non_equal($decoded->{'connection-time'}, "-1.0", "API check connecton time");
}

sub test_connections {
    for ($i=0; $i<=250; $i++) {
        my $response = `curl -s http://${ip}:${port}`;
    }

    my $response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/0`;
    my $decoded = decode_json($response);
    
    assert_equal($decoded->{'connections'}, "0", "API check connections established");
}

sub test_connect_timeout {
    $socket = new IO::Socket::INET (
    PeerHost => $ip,
    PeerPort => $port,
    Proto => 'tcp',
    ) or die "ERROR in Socket Creation : $!\n";
    sleep(4);

    unless ($socket->connected) {
        assert_equal(1, 0, "Connect timeout check");
    } else {
        assert_equal(1,1, "Connect timeout check");
    }
}

sub test_add_backend {
    my $response = `curl -s -X PUT --data-ascii '{id: 3, weight: 1, name:"agapito", address:"127.0.0.1", port:1000}' --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backends`;
    my $response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/3`;
    my $decoded = decode_json($response);

    assert_equal($decoded->{'id'}, "3", "API add backend");
}

sub test_add_backend_fail {
    my $response = `curl -s -X PUT --data-ascii '{id: 3, weight: 1, name:"agapito", port:1000}' --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backends`;
    my $response = `curl -s --unix-socket ${control_socket} http://${ip}/listener/0/service/0/backend/3`;
    my $decoded = decode_json($response);

    assert_equal($decoded->{'result'}, "error", "API add backend fail");
}
